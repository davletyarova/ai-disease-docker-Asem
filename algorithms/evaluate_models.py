import os
import pickle
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score

# === –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
df = pd.read_csv("dataset/Training.csv")
df = df.loc[:, ~df.columns.str.contains('^Unnamed')]
df.columns = df.columns.str.strip()
df.fillna(0, inplace=True)

X = df.drop("prognosis", axis=1)
y = df["prognosis"]

le = LabelEncoder()
y_encoded = le.fit_transform(y)

X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)

# === –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º –º–æ–¥–µ–ª—è–º ===
MODEL_DIR = "new_model"

def load_model(name):
    path = os.path.join(MODEL_DIR, f"{name}.pkl")
    if not os.path.exists(path):
        raise FileNotFoundError(f"–ú–æ–¥–µ–ª—å {name}.pkl –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–∞–ø–∫–µ {MODEL_DIR}")
    with open(path, "rb") as f:
        return pickle.load(f)

# === –í—Å–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å ===
algorithms = {
    "Logistic Regression": "logistic_regression",
    "KNN": "knn",
    "Naive Bayes": "naive_bayes",
    "SVM": "svm",
    "Decision Tree": "decision_tree",
    "Random Forest": "random_forest",
    "Gradient Boosting": "gradient_boosting",
    "Linear Regression": "linear_regression"
}

print("üìä Accuracy –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ:\n")

for name, file in algorithms.items():
    try:
        model = load_model(file)
        y_pred = model.predict(X_test.values)
        acc = accuracy_score(y_test, y_pred)
        print(f"{name:25}: ‚úÖ Accuracy = {acc:.4f}")
    except Exception as e:
        print(f"{name:25}: ‚ö†Ô∏è –û—à–∏–±–∫–∞ ‚Äî {str(e)}")
